/*
  Generated by atdts from type definitions in 'specification.atd'.

  Type-safe translations from/to JSON

  For each type 'Foo', there is a pair of functions:
  - 'writeFoo': convert a 'Foo' value into a JSON-compatible value.
  - 'readFoo': convert a JSON-compatible value into a TypeScript value
    of type 'Foo'.
*/

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */

export type SpecificationT =
| { kind: 'Manifest'; value: ManifestT }
| { kind: 'Collection'; value: CollectionT }

export type CollectionT = {
  id: IdT;
  type: TypeT;
  label: LabelT;
  metadata?: MetadataT[];
  items?: SpecificationT[];
}

export type ManifestT = {
  id: IdT;
  type: TypeT;
  label: LabelT;
  metadata?: MetadataT[];
  service?: ServiceT[];
  services?: ServiceT[];
  requiredStatement?: RequiredStatementT;
  summary?: SummaryT;
  thumbnail?: ThumbnailT[];
  rendering?: RenderingT[];
  viewingDirection?: ViewingDirectionT;
  behavior?: BehaviorT[];
  navDate?: NavDateT;
  rights?: RightsT;
  seeAlso?: SeeAlsoT[];
  homepage?: HomepageT[];
  provider?: ProviderT[];
  partOf?: PartOfT[];
  start?: StartT;
  items?: CanvasT[];
  annotations?: W3cAnnotationPageT[];
}

export type ClassT = {
  id: IdT;
  type: TypeT;
  label?: LabelT;
}

export type CanvasT = {
  id: IdT;
  type: TypeT;
  label?: LabelT;
  height?: HeightT;
  width?: WidthT;
  duration?: DurationT;
  metadata?: MetadataT[];
  summary?: SummaryT;
  requiredStatement?: RequiredStatementT;
  rendering?: RenderingT[];
  rights?: RightsT;
  navDate?: NavDateT;
  provider?: ProviderT[];
  seeAlso?: SeeAlsoT[];
  service?: ServiceT[];
  thumbnail?: ThumbnailT[];
  homepage?: HomepageT[];
  behavior?: BehaviorT[];
  partOf?: PartOfT[];
  items?: AnnotationPageT[];
  annotations?: W3cAnnotationPageT[];
}

export type NavPlaceT = {
  id: IdT;
  type: TypeT;
  features_t: Option<FeatureT[]>;
}

export type FeatureT = {
  id?: IdT;
  type?: TypeT;
  properties?: PropertiesT;
  geometry?: GeometryT;
}

export type PropertiesT = {
  label?: LabelT;
}

export type GeometryT = {
  type?: TypeT;
  coordinates?: CoordinatesT;
}

export type CoordinatesT = number[]

export type AnnotationPageT = {
  id: IdT;
  type: TypeT;
  items?: AnnotationT[];
}

export type AnnotationT = {
  id: IdT;
  type: TypeT;
  service?: ServiceT[];
  thumbnail?: ThumbnailT[];
  rendering?: RenderingT[];
  motivation?: MotivationT;
  body?: AnnotationBodyT;
  target?: AnnotationTargetT;
}

export type AnnotationBodyT = {
  id: IdT;
  type: TypeT;
  label?: LabelT;
  format?: FormatT;
  profile?: ProfileT;
  width?: WidthT;
  height?: HeightT;
  duration?: DurationT;
  language?: LanguageT;
  rendering?: RenderingT[];
  thumbnail?: ThumbnailT[];
  service?: ServiceT[];
  annotations?: AnnotationPageT[];
}

export type AnnotationTargetT = W3cAnnotationTargetT

export type W3cAnnotationT = {
  id: IdT;
  type: TypeT;
  motivation?: MotivationT;
  body?: W3cAnnotationBodyT;
  target?: W3cAnnotationTargetT;
  created?: CreatedT;
  modified?: ModifiedT;
}

export type W3cAnnotationPageT = {
  id: IdT;
  type: TypeT;
  service?: ServiceT[];
  rendering?: RenderingT[];
  thumbnail?: ThumbnailT[];
  items?: W3cAnnotationT[];
}

export type MetadataT = {
  label: LngStringT;
  value: LngStringT;
}

export type RequiredStatementT = {
  label: LngStringT;
  value: LngStringT;
}

export type ThumbnailT = ResourceT

export type LogoT = ResourceT

export type ResourceT = {
  id: IdT;
  type: TypeT;
  label?: LabelT;
  format?: FormatT;
  profile?: ProfileT;
  width?: WidthT;
  height?: HeightT;
  duration?: DurationT;
  language?: LanguageT;
  rendering?: RenderingT[];
  thumbnail?: ThumbnailT[];
  service?: ServiceT[];
  annotations?: AnnotationPageT[];
}

export type ServiceT =
| { kind: 'T1'; value: ServiceT1 }
| { kind: 'T2'; value: ServiceT2 }

export type ServiceT1 = {
  id: IdT;
  type: TypeT;
  label?: LabelT;
  profile?: ProfileT;
  service?: ServiceT[];
}

export type ServiceT2 = {
  id: IdT;
  type: TypeT;
  profile?: ProfileT;
  service?: ServiceT[];
}

export type LabelT = LngStringT

export type SummaryT = LngStringT

export type LngStringT = [string, string[]][]

export type W3cAnnotationBodyT = {
  type: TypeT;
  language: LanguageT;
  value: ValueT;
}

export type W3cAnnotationTargetT =
| { kind: 'T1'; value: W3cAnnotationTargetT1 }
| { kind: 'T2'; value: W3cAnnotationTargetT2 }

export type W3cAnnotationTargetT1 = string

export type W3cAnnotationTargetT2 = {
  type: string;
  source: IdT;
}

export type ExternalT = {
  id: IdT;
  type: TypeT;
  label?: LabelT;
  format?: FormatT;
  profile?: ProfileT;
}

export type SeeAlsoT = ExternalT

export type RenderingT = ExternalT

export type HomepageT = {
  id: IdT;
  type: TypeT;
  label?: LabelT;
  format?: FormatT;
  language?: LanguageT[];
}

export type ProviderT = {
  id: IdT;
  type: TypeT;
  label?: LabelT;
  homepage?: HomepageT[];
  logo?: LogoT[];
  seeAlso?: SeeAlsoT[];
}

export type PartOfT = ClassT

export type StartT = ClassT

export type MotivationT =
| { kind: 'T1'; value: MotivationT1 }
| { kind: 'T2'; value: MotivationT2 }

export type MotivationT1 = string

export type MotivationT2 = string[]

export type IdT = string

export type TypeT = string

export type HeightT = number /*int*/

export type WidthT = number /*int*/

export type DurationT = number /*int*/

export type CreatedT = string

export type ModifiedT = string

export type FormatT = string

export type ProfileT = string

export type LanguageT = string

export type ViewingDirectionT = string

export type BehaviorT = string

export type NavDateT = string

export type RightsT = string

export type ValueT = string

export function _writeSpecificationT(x: SpecificationT, context: any = x): any {
  switch (x.kind) {
    case 'Manifest':
      return ['Manifest', writeManifestT(x.value, x)]
    case 'Collection':
      return ['Collection', writeCollectionT(x.value, x)]
  }
}

export function _readSpecificationT(x: any, context: any = x): SpecificationT {
  _atd_check_json_tuple(2, x, context)
  switch (x[0]) {
    case 'Manifest':
      return { kind: 'Manifest', value: readManifestT(x[1], x) }
    case 'Collection':
      return { kind: 'Collection', value: readCollectionT(x[1], x) }
    default:
      _atd_bad_json('SpecificationT', x, context)
      throw new Error('impossible')
  }
}

export function writeCollectionT(x: CollectionT, context: any = x): any {
  return {
    'id': _atd_write_required_field('CollectionT', 'id', writeIdT, x.id, x),
    'type': _atd_write_required_field('CollectionT', 'type', writeTypeT, x.type, x),
    'label': _atd_write_required_field('CollectionT', 'label', writeLabelT, x.label, x),
    'metadata': _atd_write_optional_field(_atd_write_array(writeMetadataT), x.metadata, x),
    'items': _atd_write_optional_field(_atd_write_array(writeSpecificationT), x.items, x),
  };
}

export function readCollectionT(x: any, context: any = x): CollectionT {
  return {
    id: _atd_read_required_field('CollectionT', 'id', readIdT, x['id'], x),
    type: _atd_read_required_field('CollectionT', 'type', readTypeT, x['type'], x),
    label: _atd_read_required_field('CollectionT', 'label', readLabelT, x['label'], x),
    metadata: _atd_read_optional_field(_atd_read_array(readMetadataT), x['metadata'], x),
    items: _atd_read_optional_field(_atd_read_array(readSpecificationT), x['items'], x),
  };
}

export function writeManifestT(x: ManifestT, context: any = x): any {
  return {
    'id': _atd_write_required_field('ManifestT', 'id', writeIdT, x.id, x),
    'type': _atd_write_required_field('ManifestT', 'type', writeTypeT, x.type, x),
    'label': _atd_write_required_field('ManifestT', 'label', writeLabelT, x.label, x),
    'metadata': _atd_write_optional_field(_atd_write_array(writeMetadataT), x.metadata, x),
    'service': _atd_write_optional_field(_atd_write_array(writeServiceT), x.service, x),
    'services': _atd_write_optional_field(_atd_write_array(writeServiceT), x.services, x),
    'requiredStatement': _atd_write_optional_field(writeRequiredStatementT, x.requiredStatement, x),
    'summary': _atd_write_optional_field(writeSummaryT, x.summary, x),
    'thumbnail': _atd_write_optional_field(_atd_write_array(writeThumbnailT), x.thumbnail, x),
    'rendering': _atd_write_optional_field(_atd_write_array(writeRenderingT), x.rendering, x),
    'viewingDirection': _atd_write_optional_field(writeViewingDirectionT, x.viewingDirection, x),
    'behavior': _atd_write_optional_field(_atd_write_array(writeBehaviorT), x.behavior, x),
    'navDate': _atd_write_optional_field(writeNavDateT, x.navDate, x),
    'rights': _atd_write_optional_field(writeRightsT, x.rights, x),
    'seeAlso': _atd_write_optional_field(_atd_write_array(writeSeeAlsoT), x.seeAlso, x),
    'homepage': _atd_write_optional_field(_atd_write_array(writeHomepageT), x.homepage, x),
    'provider': _atd_write_optional_field(_atd_write_array(writeProviderT), x.provider, x),
    'partOf': _atd_write_optional_field(_atd_write_array(writePartOfT), x.partOf, x),
    'start': _atd_write_optional_field(writeStartT, x.start, x),
    'items': _atd_write_optional_field(_atd_write_array(writeCanvasT), x.items, x),
    'annotations': _atd_write_optional_field(_atd_write_array(writeW3cAnnotationPageT), x.annotations, x),
  };
}

export function readManifestT(x: any, context: any = x): ManifestT {
  return {
    id: _atd_read_required_field('ManifestT', 'id', readIdT, x['id'], x),
    type: _atd_read_required_field('ManifestT', 'type', readTypeT, x['type'], x),
    label: _atd_read_required_field('ManifestT', 'label', readLabelT, x['label'], x),
    metadata: _atd_read_optional_field(_atd_read_array(readMetadataT), x['metadata'], x),
    service: _atd_read_optional_field(_atd_read_array(readServiceT), x['service'], x),
    services: _atd_read_optional_field(_atd_read_array(readServiceT), x['services'], x),
    requiredStatement: _atd_read_optional_field(readRequiredStatementT, x['requiredStatement'], x),
    summary: _atd_read_optional_field(readSummaryT, x['summary'], x),
    thumbnail: _atd_read_optional_field(_atd_read_array(readThumbnailT), x['thumbnail'], x),
    rendering: _atd_read_optional_field(_atd_read_array(readRenderingT), x['rendering'], x),
    viewingDirection: _atd_read_optional_field(readViewingDirectionT, x['viewingDirection'], x),
    behavior: _atd_read_optional_field(_atd_read_array(readBehaviorT), x['behavior'], x),
    navDate: _atd_read_optional_field(readNavDateT, x['navDate'], x),
    rights: _atd_read_optional_field(readRightsT, x['rights'], x),
    seeAlso: _atd_read_optional_field(_atd_read_array(readSeeAlsoT), x['seeAlso'], x),
    homepage: _atd_read_optional_field(_atd_read_array(readHomepageT), x['homepage'], x),
    provider: _atd_read_optional_field(_atd_read_array(readProviderT), x['provider'], x),
    partOf: _atd_read_optional_field(_atd_read_array(readPartOfT), x['partOf'], x),
    start: _atd_read_optional_field(readStartT, x['start'], x),
    items: _atd_read_optional_field(_atd_read_array(readCanvasT), x['items'], x),
    annotations: _atd_read_optional_field(_atd_read_array(readW3cAnnotationPageT), x['annotations'], x),
  };
}

export function writeClassT(x: ClassT, context: any = x): any {
  return {
    'id': _atd_write_required_field('ClassT', 'id', writeIdT, x.id, x),
    'type': _atd_write_required_field('ClassT', 'type', writeTypeT, x.type, x),
    'label': _atd_write_optional_field(writeLabelT, x.label, x),
  };
}

export function readClassT(x: any, context: any = x): ClassT {
  return {
    id: _atd_read_required_field('ClassT', 'id', readIdT, x['id'], x),
    type: _atd_read_required_field('ClassT', 'type', readTypeT, x['type'], x),
    label: _atd_read_optional_field(readLabelT, x['label'], x),
  };
}

export function writeCanvasT(x: CanvasT, context: any = x): any {
  return {
    'id': _atd_write_required_field('CanvasT', 'id', writeIdT, x.id, x),
    'type': _atd_write_required_field('CanvasT', 'type', writeTypeT, x.type, x),
    'label': _atd_write_optional_field(writeLabelT, x.label, x),
    'height': _atd_write_optional_field(writeHeightT, x.height, x),
    'width': _atd_write_optional_field(writeWidthT, x.width, x),
    'duration': _atd_write_optional_field(writeDurationT, x.duration, x),
    'metadata': _atd_write_optional_field(_atd_write_array(writeMetadataT), x.metadata, x),
    'summary': _atd_write_optional_field(writeSummaryT, x.summary, x),
    'requiredStatement': _atd_write_optional_field(writeRequiredStatementT, x.requiredStatement, x),
    'rendering': _atd_write_optional_field(_atd_write_array(writeRenderingT), x.rendering, x),
    'rights': _atd_write_optional_field(writeRightsT, x.rights, x),
    'navDate': _atd_write_optional_field(writeNavDateT, x.navDate, x),
    'provider': _atd_write_optional_field(_atd_write_array(writeProviderT), x.provider, x),
    'seeAlso': _atd_write_optional_field(_atd_write_array(writeSeeAlsoT), x.seeAlso, x),
    'service': _atd_write_optional_field(_atd_write_array(writeServiceT), x.service, x),
    'thumbnail': _atd_write_optional_field(_atd_write_array(writeThumbnailT), x.thumbnail, x),
    'homepage': _atd_write_optional_field(_atd_write_array(writeHomepageT), x.homepage, x),
    'behavior': _atd_write_optional_field(_atd_write_array(writeBehaviorT), x.behavior, x),
    'partOf': _atd_write_optional_field(_atd_write_array(writePartOfT), x.partOf, x),
    'items': _atd_write_optional_field(_atd_write_array(writeAnnotationPageT), x.items, x),
    'annotations': _atd_write_optional_field(_atd_write_array(writeW3cAnnotationPageT), x.annotations, x),
  };
}

export function readCanvasT(x: any, context: any = x): CanvasT {
  return {
    id: _atd_read_required_field('CanvasT', 'id', readIdT, x['id'], x),
    type: _atd_read_required_field('CanvasT', 'type', readTypeT, x['type'], x),
    label: _atd_read_optional_field(readLabelT, x['label'], x),
    height: _atd_read_optional_field(readHeightT, x['height'], x),
    width: _atd_read_optional_field(readWidthT, x['width'], x),
    duration: _atd_read_optional_field(readDurationT, x['duration'], x),
    metadata: _atd_read_optional_field(_atd_read_array(readMetadataT), x['metadata'], x),
    summary: _atd_read_optional_field(readSummaryT, x['summary'], x),
    requiredStatement: _atd_read_optional_field(readRequiredStatementT, x['requiredStatement'], x),
    rendering: _atd_read_optional_field(_atd_read_array(readRenderingT), x['rendering'], x),
    rights: _atd_read_optional_field(readRightsT, x['rights'], x),
    navDate: _atd_read_optional_field(readNavDateT, x['navDate'], x),
    provider: _atd_read_optional_field(_atd_read_array(readProviderT), x['provider'], x),
    seeAlso: _atd_read_optional_field(_atd_read_array(readSeeAlsoT), x['seeAlso'], x),
    service: _atd_read_optional_field(_atd_read_array(readServiceT), x['service'], x),
    thumbnail: _atd_read_optional_field(_atd_read_array(readThumbnailT), x['thumbnail'], x),
    homepage: _atd_read_optional_field(_atd_read_array(readHomepageT), x['homepage'], x),
    behavior: _atd_read_optional_field(_atd_read_array(readBehaviorT), x['behavior'], x),
    partOf: _atd_read_optional_field(_atd_read_array(readPartOfT), x['partOf'], x),
    items: _atd_read_optional_field(_atd_read_array(readAnnotationPageT), x['items'], x),
    annotations: _atd_read_optional_field(_atd_read_array(readW3cAnnotationPageT), x['annotations'], x),
  };
}

export function writeNavPlaceT(x: NavPlaceT, context: any = x): any {
  return {
    'id': _atd_write_required_field('NavPlaceT', 'id', writeIdT, x.id, x),
    'type': _atd_write_required_field('NavPlaceT', 'type', writeTypeT, x.type, x),
    'features_t': _atd_write_required_field('NavPlaceT', 'features_t', _atd_write_option(_atd_write_array(writeFeatureT)), x.features_t, x),
  };
}

export function readNavPlaceT(x: any, context: any = x): NavPlaceT {
  return {
    id: _atd_read_required_field('NavPlaceT', 'id', readIdT, x['id'], x),
    type: _atd_read_required_field('NavPlaceT', 'type', readTypeT, x['type'], x),
    features_t: _atd_read_required_field('NavPlaceT', 'features_t', _atd_read_option(_atd_read_array(readFeatureT)), x['features_t'], x),
  };
}

export function writeFeatureT(x: FeatureT, context: any = x): any {
  return {
    'id': _atd_write_optional_field(writeIdT, x.id, x),
    'type': _atd_write_optional_field(writeTypeT, x.type, x),
    'properties': _atd_write_optional_field(writePropertiesT, x.properties, x),
    'geometry': _atd_write_optional_field(writeGeometryT, x.geometry, x),
  };
}

export function readFeatureT(x: any, context: any = x): FeatureT {
  return {
    id: _atd_read_optional_field(readIdT, x['id'], x),
    type: _atd_read_optional_field(readTypeT, x['type'], x),
    properties: _atd_read_optional_field(readPropertiesT, x['properties'], x),
    geometry: _atd_read_optional_field(readGeometryT, x['geometry'], x),
  };
}

export function writePropertiesT(x: PropertiesT, context: any = x): any {
  return {
    'label': _atd_write_optional_field(writeLabelT, x.label, x),
  };
}

export function readPropertiesT(x: any, context: any = x): PropertiesT {
  return {
    label: _atd_read_optional_field(readLabelT, x['label'], x),
  };
}

export function writeGeometryT(x: GeometryT, context: any = x): any {
  return {
    'type': _atd_write_optional_field(writeTypeT, x.type, x),
    'coordinates': _atd_write_optional_field(writeCoordinatesT, x.coordinates, x),
  };
}

export function readGeometryT(x: any, context: any = x): GeometryT {
  return {
    type: _atd_read_optional_field(readTypeT, x['type'], x),
    coordinates: _atd_read_optional_field(readCoordinatesT, x['coordinates'], x),
  };
}

export function writeCoordinatesT(x: CoordinatesT, context: any = x): any {
  return _atd_write_array(_atd_write_float)(x, context);
}

export function readCoordinatesT(x: any, context: any = x): CoordinatesT {
  return _atd_read_array(_atd_read_float)(x, context);
}

export function writeAnnotationPageT(x: AnnotationPageT, context: any = x): any {
  return {
    'id': _atd_write_required_field('AnnotationPageT', 'id', writeIdT, x.id, x),
    'type': _atd_write_required_field('AnnotationPageT', 'type', writeTypeT, x.type, x),
    'items': _atd_write_optional_field(_atd_write_array(writeAnnotationT), x.items, x),
  };
}

export function readAnnotationPageT(x: any, context: any = x): AnnotationPageT {
  return {
    id: _atd_read_required_field('AnnotationPageT', 'id', readIdT, x['id'], x),
    type: _atd_read_required_field('AnnotationPageT', 'type', readTypeT, x['type'], x),
    items: _atd_read_optional_field(_atd_read_array(readAnnotationT), x['items'], x),
  };
}

export function writeAnnotationT(x: AnnotationT, context: any = x): any {
  return {
    'id': _atd_write_required_field('AnnotationT', 'id', writeIdT, x.id, x),
    'type': _atd_write_required_field('AnnotationT', 'type', writeTypeT, x.type, x),
    'service': _atd_write_optional_field(_atd_write_array(writeServiceT), x.service, x),
    'thumbnail': _atd_write_optional_field(_atd_write_array(writeThumbnailT), x.thumbnail, x),
    'rendering': _atd_write_optional_field(_atd_write_array(writeRenderingT), x.rendering, x),
    'motivation': _atd_write_optional_field(writeMotivationT, x.motivation, x),
    'body': _atd_write_optional_field(writeAnnotationBodyT, x.body, x),
    'target': _atd_write_optional_field(writeAnnotationTargetT, x.target, x),
  };
}

export function readAnnotationT(x: any, context: any = x): AnnotationT {
  return {
    id: _atd_read_required_field('AnnotationT', 'id', readIdT, x['id'], x),
    type: _atd_read_required_field('AnnotationT', 'type', readTypeT, x['type'], x),
    service: _atd_read_optional_field(_atd_read_array(readServiceT), x['service'], x),
    thumbnail: _atd_read_optional_field(_atd_read_array(readThumbnailT), x['thumbnail'], x),
    rendering: _atd_read_optional_field(_atd_read_array(readRenderingT), x['rendering'], x),
    motivation: _atd_read_optional_field(readMotivationT, x['motivation'], x),
    body: _atd_read_optional_field(readAnnotationBodyT, x['body'], x),
    target: _atd_read_optional_field(readAnnotationTargetT, x['target'], x),
  };
}

export function writeAnnotationBodyT(x: AnnotationBodyT, context: any = x): any {
  return {
    'id': _atd_write_required_field('AnnotationBodyT', 'id', writeIdT, x.id, x),
    'type': _atd_write_required_field('AnnotationBodyT', 'type', writeTypeT, x.type, x),
    'label': _atd_write_optional_field(writeLabelT, x.label, x),
    'format': _atd_write_optional_field(writeFormatT, x.format, x),
    'profile': _atd_write_optional_field(writeProfileT, x.profile, x),
    'width': _atd_write_optional_field(writeWidthT, x.width, x),
    'height': _atd_write_optional_field(writeHeightT, x.height, x),
    'duration': _atd_write_optional_field(writeDurationT, x.duration, x),
    'language': _atd_write_optional_field(writeLanguageT, x.language, x),
    'rendering': _atd_write_optional_field(_atd_write_array(writeRenderingT), x.rendering, x),
    'thumbnail': _atd_write_optional_field(_atd_write_array(writeThumbnailT), x.thumbnail, x),
    'service': _atd_write_optional_field(_atd_write_array(writeServiceT), x.service, x),
    'annotations': _atd_write_optional_field(_atd_write_array(writeAnnotationPageT), x.annotations, x),
  };
}

export function readAnnotationBodyT(x: any, context: any = x): AnnotationBodyT {
  return {
    id: _atd_read_required_field('AnnotationBodyT', 'id', readIdT, x['id'], x),
    type: _atd_read_required_field('AnnotationBodyT', 'type', readTypeT, x['type'], x),
    label: _atd_read_optional_field(readLabelT, x['label'], x),
    format: _atd_read_optional_field(readFormatT, x['format'], x),
    profile: _atd_read_optional_field(readProfileT, x['profile'], x),
    width: _atd_read_optional_field(readWidthT, x['width'], x),
    height: _atd_read_optional_field(readHeightT, x['height'], x),
    duration: _atd_read_optional_field(readDurationT, x['duration'], x),
    language: _atd_read_optional_field(readLanguageT, x['language'], x),
    rendering: _atd_read_optional_field(_atd_read_array(readRenderingT), x['rendering'], x),
    thumbnail: _atd_read_optional_field(_atd_read_array(readThumbnailT), x['thumbnail'], x),
    service: _atd_read_optional_field(_atd_read_array(readServiceT), x['service'], x),
    annotations: _atd_read_optional_field(_atd_read_array(readAnnotationPageT), x['annotations'], x),
  };
}

export function writeAnnotationTargetT(x: AnnotationTargetT, context: any = x): any {
  return writeW3cAnnotationTargetT(x, context);
}

export function readAnnotationTargetT(x: any, context: any = x): AnnotationTargetT {
  return readW3cAnnotationTargetT(x, context);
}

export function writeW3cAnnotationT(x: W3cAnnotationT, context: any = x): any {
  return {
    'id': _atd_write_required_field('W3cAnnotationT', 'id', writeIdT, x.id, x),
    'type': _atd_write_required_field('W3cAnnotationT', 'type', writeTypeT, x.type, x),
    'motivation': _atd_write_optional_field(writeMotivationT, x.motivation, x),
    'body': _atd_write_optional_field(writeW3cAnnotationBodyT, x.body, x),
    'target': _atd_write_optional_field(writeW3cAnnotationTargetT, x.target, x),
    'created': _atd_write_optional_field(writeCreatedT, x.created, x),
    'modified': _atd_write_optional_field(writeModifiedT, x.modified, x),
  };
}

export function readW3cAnnotationT(x: any, context: any = x): W3cAnnotationT {
  return {
    id: _atd_read_required_field('W3cAnnotationT', 'id', readIdT, x['id'], x),
    type: _atd_read_required_field('W3cAnnotationT', 'type', readTypeT, x['type'], x),
    motivation: _atd_read_optional_field(readMotivationT, x['motivation'], x),
    body: _atd_read_optional_field(readW3cAnnotationBodyT, x['body'], x),
    target: _atd_read_optional_field(readW3cAnnotationTargetT, x['target'], x),
    created: _atd_read_optional_field(readCreatedT, x['created'], x),
    modified: _atd_read_optional_field(readModifiedT, x['modified'], x),
  };
}

export function writeW3cAnnotationPageT(x: W3cAnnotationPageT, context: any = x): any {
  return {
    'id': _atd_write_required_field('W3cAnnotationPageT', 'id', writeIdT, x.id, x),
    'type': _atd_write_required_field('W3cAnnotationPageT', 'type', writeTypeT, x.type, x),
    'service': _atd_write_optional_field(_atd_write_array(writeServiceT), x.service, x),
    'rendering': _atd_write_optional_field(_atd_write_array(writeRenderingT), x.rendering, x),
    'thumbnail': _atd_write_optional_field(_atd_write_array(writeThumbnailT), x.thumbnail, x),
    'items': _atd_write_optional_field(_atd_write_array(writeW3cAnnotationT), x.items, x),
  };
}

export function readW3cAnnotationPageT(x: any, context: any = x): W3cAnnotationPageT {
  return {
    id: _atd_read_required_field('W3cAnnotationPageT', 'id', readIdT, x['id'], x),
    type: _atd_read_required_field('W3cAnnotationPageT', 'type', readTypeT, x['type'], x),
    service: _atd_read_optional_field(_atd_read_array(readServiceT), x['service'], x),
    rendering: _atd_read_optional_field(_atd_read_array(readRenderingT), x['rendering'], x),
    thumbnail: _atd_read_optional_field(_atd_read_array(readThumbnailT), x['thumbnail'], x),
    items: _atd_read_optional_field(_atd_read_array(readW3cAnnotationT), x['items'], x),
  };
}

export function writeMetadataT(x: MetadataT, context: any = x): any {
  return {
    'label': _atd_write_required_field('MetadataT', 'label', writeLngStringT, x.label, x),
    'value': _atd_write_required_field('MetadataT', 'value', writeLngStringT, x.value, x),
  };
}

export function readMetadataT(x: any, context: any = x): MetadataT {
  return {
    label: _atd_read_required_field('MetadataT', 'label', readLngStringT, x['label'], x),
    value: _atd_read_required_field('MetadataT', 'value', readLngStringT, x['value'], x),
  };
}

export function writeRequiredStatementT(x: RequiredStatementT, context: any = x): any {
  return {
    'label': _atd_write_required_field('RequiredStatementT', 'label', writeLngStringT, x.label, x),
    'value': _atd_write_required_field('RequiredStatementT', 'value', writeLngStringT, x.value, x),
  };
}

export function readRequiredStatementT(x: any, context: any = x): RequiredStatementT {
  return {
    label: _atd_read_required_field('RequiredStatementT', 'label', readLngStringT, x['label'], x),
    value: _atd_read_required_field('RequiredStatementT', 'value', readLngStringT, x['value'], x),
  };
}

export function writeThumbnailT(x: ThumbnailT, context: any = x): any {
  return writeResourceT(x, context);
}

export function readThumbnailT(x: any, context: any = x): ThumbnailT {
  return readResourceT(x, context);
}

export function writeLogoT(x: LogoT, context: any = x): any {
  return writeResourceT(x, context);
}

export function readLogoT(x: any, context: any = x): LogoT {
  return readResourceT(x, context);
}

export function writeResourceT(x: ResourceT, context: any = x): any {
  return {
    'id': _atd_write_required_field('ResourceT', 'id', writeIdT, x.id, x),
    'type': _atd_write_required_field('ResourceT', 'type', writeTypeT, x.type, x),
    'label': _atd_write_optional_field(writeLabelT, x.label, x),
    'format': _atd_write_optional_field(writeFormatT, x.format, x),
    'profile': _atd_write_optional_field(writeProfileT, x.profile, x),
    'width': _atd_write_optional_field(writeWidthT, x.width, x),
    'height': _atd_write_optional_field(writeHeightT, x.height, x),
    'duration': _atd_write_optional_field(writeDurationT, x.duration, x),
    'language': _atd_write_optional_field(writeLanguageT, x.language, x),
    'rendering': _atd_write_optional_field(_atd_write_array(writeRenderingT), x.rendering, x),
    'thumbnail': _atd_write_optional_field(_atd_write_array(writeThumbnailT), x.thumbnail, x),
    'service': _atd_write_optional_field(_atd_write_array(writeServiceT), x.service, x),
    'annotations': _atd_write_optional_field(_atd_write_array(writeAnnotationPageT), x.annotations, x),
  };
}

export function readResourceT(x: any, context: any = x): ResourceT {
  return {
    id: _atd_read_required_field('ResourceT', 'id', readIdT, x['id'], x),
    type: _atd_read_required_field('ResourceT', 'type', readTypeT, x['type'], x),
    label: _atd_read_optional_field(readLabelT, x['label'], x),
    format: _atd_read_optional_field(readFormatT, x['format'], x),
    profile: _atd_read_optional_field(readProfileT, x['profile'], x),
    width: _atd_read_optional_field(readWidthT, x['width'], x),
    height: _atd_read_optional_field(readHeightT, x['height'], x),
    duration: _atd_read_optional_field(readDurationT, x['duration'], x),
    language: _atd_read_optional_field(readLanguageT, x['language'], x),
    rendering: _atd_read_optional_field(_atd_read_array(readRenderingT), x['rendering'], x),
    thumbnail: _atd_read_optional_field(_atd_read_array(readThumbnailT), x['thumbnail'], x),
    service: _atd_read_optional_field(_atd_read_array(readServiceT), x['service'], x),
    annotations: _atd_read_optional_field(_atd_read_array(readAnnotationPageT), x['annotations'], x),
  };
}

export function _writeServiceT(x: ServiceT, context: any = x): any {
  switch (x.kind) {
    case 'T1':
      return ['T1', writeServiceT1(x.value, x)]
    case 'T2':
      return ['T2', writeServiceT2(x.value, x)]
  }
}

export function _readServiceT(x: any, context: any = x): ServiceT {
  _atd_check_json_tuple(2, x, context)
  switch (x[0]) {
    case 'T1':
      return { kind: 'T1', value: readServiceT1(x[1], x) }
    case 'T2':
      return { kind: 'T2', value: readServiceT2(x[1], x) }
    default:
      _atd_bad_json('ServiceT', x, context)
      throw new Error('impossible')
  }
}

export function writeServiceT1(x: ServiceT1, context: any = x): any {
  return {
    'id': _atd_write_required_field('ServiceT1', 'id', writeIdT, x.id, x),
    'type': _atd_write_required_field('ServiceT1', 'type', writeTypeT, x.type, x),
    'label': _atd_write_optional_field(writeLabelT, x.label, x),
    'profile': _atd_write_optional_field(writeProfileT, x.profile, x),
    'service': _atd_write_optional_field(_atd_write_array(writeServiceT), x.service, x),
  };
}

export function readServiceT1(x: any, context: any = x): ServiceT1 {
  return {
    id: _atd_read_required_field('ServiceT1', 'id', readIdT, x['id'], x),
    type: _atd_read_required_field('ServiceT1', 'type', readTypeT, x['type'], x),
    label: _atd_read_optional_field(readLabelT, x['label'], x),
    profile: _atd_read_optional_field(readProfileT, x['profile'], x),
    service: _atd_read_optional_field(_atd_read_array(readServiceT), x['service'], x),
  };
}

export function writeServiceT2(x: ServiceT2, context: any = x): any {
  return {
    '@id': _atd_write_required_field('ServiceT2', 'id', writeIdT, x.id, x),
    '@type': _atd_write_required_field('ServiceT2', 'type', writeTypeT, x.type, x),
    'profile': _atd_write_optional_field(writeProfileT, x.profile, x),
    'service': _atd_write_optional_field(_atd_write_array(writeServiceT), x.service, x),
  };
}

export function readServiceT2(x: any, context: any = x): ServiceT2 {
  return {
    id: _atd_read_required_field('ServiceT2', '@id', readIdT, x['@id'], x),
    type: _atd_read_required_field('ServiceT2', '@type', readTypeT, x['@type'], x),
    profile: _atd_read_optional_field(readProfileT, x['profile'], x),
    service: _atd_read_optional_field(_atd_read_array(readServiceT), x['service'], x),
  };
}

export function writeLabelT(x: LabelT, context: any = x): any {
  return writeLngStringT(x, context);
}

export function readLabelT(x: any, context: any = x): LabelT {
  return readLngStringT(x, context);
}

export function writeSummaryT(x: SummaryT, context: any = x): any {
  return writeLngStringT(x, context);
}

export function readSummaryT(x: any, context: any = x): SummaryT {
  return readLngStringT(x, context);
}

export function writeLngStringT(x: LngStringT, context: any = x): any {
  return _atd_write_assoc_array_to_object(_atd_write_array(_atd_write_string))(x, context);
}

export function readLngStringT(x: any, context: any = x): LngStringT {
  return _atd_read_assoc_object_into_array(_atd_read_array(_atd_read_string))(x, context);
}

export function writeW3cAnnotationBodyT(x: W3cAnnotationBodyT, context: any = x): any {
  return {
    'type': _atd_write_required_field('W3cAnnotationBodyT', 'type', writeTypeT, x.type, x),
    'language': _atd_write_required_field('W3cAnnotationBodyT', 'language', writeLanguageT, x.language, x),
    'value': _atd_write_required_field('W3cAnnotationBodyT', 'value', writeValueT, x.value, x),
  };
}

export function readW3cAnnotationBodyT(x: any, context: any = x): W3cAnnotationBodyT {
  return {
    type: _atd_read_required_field('W3cAnnotationBodyT', 'type', readTypeT, x['type'], x),
    language: _atd_read_required_field('W3cAnnotationBodyT', 'language', readLanguageT, x['language'], x),
    value: _atd_read_required_field('W3cAnnotationBodyT', 'value', readValueT, x['value'], x),
  };
}

export function _writeW3cAnnotationTargetT(x: W3cAnnotationTargetT, context: any = x): any {
  switch (x.kind) {
    case 'T1':
      return ['T1', writeW3cAnnotationTargetT1(x.value, x)]
    case 'T2':
      return ['T2', writeW3cAnnotationTargetT2(x.value, x)]
  }
}

export function _readW3cAnnotationTargetT(x: any, context: any = x): W3cAnnotationTargetT {
  _atd_check_json_tuple(2, x, context)
  switch (x[0]) {
    case 'T1':
      return { kind: 'T1', value: readW3cAnnotationTargetT1(x[1], x) }
    case 'T2':
      return { kind: 'T2', value: readW3cAnnotationTargetT2(x[1], x) }
    default:
      _atd_bad_json('W3cAnnotationTargetT', x, context)
      throw new Error('impossible')
  }
}

export function writeW3cAnnotationTargetT1(x: W3cAnnotationTargetT1, context: any = x): any {
  return _atd_write_string(x, context);
}

export function readW3cAnnotationTargetT1(x: any, context: any = x): W3cAnnotationTargetT1 {
  return _atd_read_string(x, context);
}

export function writeW3cAnnotationTargetT2(x: W3cAnnotationTargetT2, context: any = x): any {
  return {
    'type': _atd_write_required_field('W3cAnnotationTargetT2', 'type', _atd_write_string, x.type, x),
    'source': _atd_write_required_field('W3cAnnotationTargetT2', 'source', writeIdT, x.source, x),
  };
}

export function readW3cAnnotationTargetT2(x: any, context: any = x): W3cAnnotationTargetT2 {
  return {
    type: _atd_read_required_field('W3cAnnotationTargetT2', 'type', _atd_read_string, x['type'], x),
    source: _atd_read_required_field('W3cAnnotationTargetT2', 'source', readIdT, x['source'], x),
  };
}

export function writeExternalT(x: ExternalT, context: any = x): any {
  return {
    'id': _atd_write_required_field('ExternalT', 'id', writeIdT, x.id, x),
    'type': _atd_write_required_field('ExternalT', 'type', writeTypeT, x.type, x),
    'label': _atd_write_optional_field(writeLabelT, x.label, x),
    'format': _atd_write_optional_field(writeFormatT, x.format, x),
    'profile': _atd_write_optional_field(writeProfileT, x.profile, x),
  };
}

export function readExternalT(x: any, context: any = x): ExternalT {
  return {
    id: _atd_read_required_field('ExternalT', 'id', readIdT, x['id'], x),
    type: _atd_read_required_field('ExternalT', 'type', readTypeT, x['type'], x),
    label: _atd_read_optional_field(readLabelT, x['label'], x),
    format: _atd_read_optional_field(readFormatT, x['format'], x),
    profile: _atd_read_optional_field(readProfileT, x['profile'], x),
  };
}

export function writeSeeAlsoT(x: SeeAlsoT, context: any = x): any {
  return writeExternalT(x, context);
}

export function readSeeAlsoT(x: any, context: any = x): SeeAlsoT {
  return readExternalT(x, context);
}

export function writeRenderingT(x: RenderingT, context: any = x): any {
  return writeExternalT(x, context);
}

export function readRenderingT(x: any, context: any = x): RenderingT {
  return readExternalT(x, context);
}

export function writeHomepageT(x: HomepageT, context: any = x): any {
  return {
    'id': _atd_write_required_field('HomepageT', 'id', writeIdT, x.id, x),
    'type': _atd_write_required_field('HomepageT', 'type', writeTypeT, x.type, x),
    'label': _atd_write_optional_field(writeLabelT, x.label, x),
    'format': _atd_write_optional_field(writeFormatT, x.format, x),
    'language': _atd_write_optional_field(_atd_write_array(writeLanguageT), x.language, x),
  };
}

export function readHomepageT(x: any, context: any = x): HomepageT {
  return {
    id: _atd_read_required_field('HomepageT', 'id', readIdT, x['id'], x),
    type: _atd_read_required_field('HomepageT', 'type', readTypeT, x['type'], x),
    label: _atd_read_optional_field(readLabelT, x['label'], x),
    format: _atd_read_optional_field(readFormatT, x['format'], x),
    language: _atd_read_optional_field(_atd_read_array(readLanguageT), x['language'], x),
  };
}

export function writeProviderT(x: ProviderT, context: any = x): any {
  return {
    'id': _atd_write_required_field('ProviderT', 'id', writeIdT, x.id, x),
    'type': _atd_write_required_field('ProviderT', 'type', writeTypeT, x.type, x),
    'label': _atd_write_optional_field(writeLabelT, x.label, x),
    'homepage': _atd_write_optional_field(_atd_write_array(writeHomepageT), x.homepage, x),
    'logo': _atd_write_optional_field(_atd_write_array(writeLogoT), x.logo, x),
    'seeAlso': _atd_write_optional_field(_atd_write_array(writeSeeAlsoT), x.seeAlso, x),
  };
}

export function readProviderT(x: any, context: any = x): ProviderT {
  return {
    id: _atd_read_required_field('ProviderT', 'id', readIdT, x['id'], x),
    type: _atd_read_required_field('ProviderT', 'type', readTypeT, x['type'], x),
    label: _atd_read_optional_field(readLabelT, x['label'], x),
    homepage: _atd_read_optional_field(_atd_read_array(readHomepageT), x['homepage'], x),
    logo: _atd_read_optional_field(_atd_read_array(readLogoT), x['logo'], x),
    seeAlso: _atd_read_optional_field(_atd_read_array(readSeeAlsoT), x['seeAlso'], x),
  };
}

export function writePartOfT(x: PartOfT, context: any = x): any {
  return writeClassT(x, context);
}

export function readPartOfT(x: any, context: any = x): PartOfT {
  return readClassT(x, context);
}

export function writeStartT(x: StartT, context: any = x): any {
  return writeClassT(x, context);
}

export function readStartT(x: any, context: any = x): StartT {
  return readClassT(x, context);
}

export function _writeMotivationT(x: MotivationT, context: any = x): any {
  switch (x.kind) {
    case 'T1':
      return ['T1', writeMotivationT1(x.value, x)]
    case 'T2':
      return ['T2', writeMotivationT2(x.value, x)]
  }
}

export function _readMotivationT(x: any, context: any = x): MotivationT {
  _atd_check_json_tuple(2, x, context)
  switch (x[0]) {
    case 'T1':
      return { kind: 'T1', value: readMotivationT1(x[1], x) }
    case 'T2':
      return { kind: 'T2', value: readMotivationT2(x[1], x) }
    default:
      _atd_bad_json('MotivationT', x, context)
      throw new Error('impossible')
  }
}

export function writeMotivationT1(x: MotivationT1, context: any = x): any {
  return _atd_write_string(x, context);
}

export function readMotivationT1(x: any, context: any = x): MotivationT1 {
  return _atd_read_string(x, context);
}

export function writeMotivationT2(x: MotivationT2, context: any = x): any {
  return _atd_write_array(_atd_write_string)(x, context);
}

export function readMotivationT2(x: any, context: any = x): MotivationT2 {
  return _atd_read_array(_atd_read_string)(x, context);
}

export function writeIdT(x: IdT, context: any = x): any {
  return _atd_write_string(x, context);
}

export function readIdT(x: any, context: any = x): IdT {
  return _atd_read_string(x, context);
}

export function writeTypeT(x: TypeT, context: any = x): any {
  return _atd_write_string(x, context);
}

export function readTypeT(x: any, context: any = x): TypeT {
  return _atd_read_string(x, context);
}

export function writeHeightT(x: HeightT, context: any = x): any {
  return _atd_write_int(x, context);
}

export function readHeightT(x: any, context: any = x): HeightT {
  return _atd_read_int(x, context);
}

export function writeWidthT(x: WidthT, context: any = x): any {
  return _atd_write_int(x, context);
}

export function readWidthT(x: any, context: any = x): WidthT {
  return _atd_read_int(x, context);
}

export function writeDurationT(x: DurationT, context: any = x): any {
  return _atd_write_int(x, context);
}

export function readDurationT(x: any, context: any = x): DurationT {
  return _atd_read_int(x, context);
}

export function writeCreatedT(x: CreatedT, context: any = x): any {
  return _atd_write_string(x, context);
}

export function readCreatedT(x: any, context: any = x): CreatedT {
  return _atd_read_string(x, context);
}

export function writeModifiedT(x: ModifiedT, context: any = x): any {
  return _atd_write_string(x, context);
}

export function readModifiedT(x: any, context: any = x): ModifiedT {
  return _atd_read_string(x, context);
}

export function writeFormatT(x: FormatT, context: any = x): any {
  return _atd_write_string(x, context);
}

export function readFormatT(x: any, context: any = x): FormatT {
  return _atd_read_string(x, context);
}

export function writeProfileT(x: ProfileT, context: any = x): any {
  return _atd_write_string(x, context);
}

export function readProfileT(x: any, context: any = x): ProfileT {
  return _atd_read_string(x, context);
}

export function writeLanguageT(x: LanguageT, context: any = x): any {
  return _atd_write_string(x, context);
}

export function readLanguageT(x: any, context: any = x): LanguageT {
  return _atd_read_string(x, context);
}

export function writeViewingDirectionT(x: ViewingDirectionT, context: any = x): any {
  return _atd_write_string(x, context);
}

export function readViewingDirectionT(x: any, context: any = x): ViewingDirectionT {
  return _atd_read_string(x, context);
}

export function writeBehaviorT(x: BehaviorT, context: any = x): any {
  return _atd_write_string(x, context);
}

export function readBehaviorT(x: any, context: any = x): BehaviorT {
  return _atd_read_string(x, context);
}

export function writeNavDateT(x: NavDateT, context: any = x): any {
  return _atd_write_string(x, context);
}

export function readNavDateT(x: any, context: any = x): NavDateT {
  return _atd_read_string(x, context);
}

export function writeRightsT(x: RightsT, context: any = x): any {
  return _atd_write_string(x, context);
}

export function readRightsT(x: any, context: any = x): RightsT {
  return _atd_read_string(x, context);
}

export function writeValueT(x: ValueT, context: any = x): any {
  return _atd_write_string(x, context);
}

export function readValueT(x: any, context: any = x): ValueT {
  return _atd_read_string(x, context);
}


/////////////////////////////////////////////////////////////////////
// Runtime library
/////////////////////////////////////////////////////////////////////

export type Option<T> = null | { value: T }

function _atd_missing_json_field(type_name: string, json_field_name: string) {
    throw new Error(`missing field '${json_field_name}'` +
                    ` in JSON object of type '${type_name}'`)
}

function _atd_missing_ts_field(type_name: string, ts_field_name: string) {
    throw new Error(`missing field '${ts_field_name}'` +
                    ` in TypeScript object of type '${type_name}'`)
}

function _atd_bad_json(expectedtype: string, json_value: any, context: any) {
  let value_str = JSON.stringify(json_value)
  if (value_str.length > 200)
    value_str = value_str.substring(0, 200) + '…';

  throw new Error(`incompatible JSON value where` +
                  ` type '${expectedtype}' was expected: '${value_str}'.` +
                  ` Occurs in '${JSON.stringify(context)}'.`)
}

function _atd_bad_ts(expectedtype: string, ts_value: any, context: any) {
  let value_str = JSON.stringify(ts_value)
  if (value_str.length > 200)
    value_str = value_str.substring(0, 200) + '…';

  throw new Error(`incompatible TypeScript value where` +
                  ` type '${expectedtype}' was expected: '${value_str}'.` +
                  ` Occurs in '${JSON.stringify(context)}'.`)
}

function _atd_check_json_tuple(len: number /*int*/, x: any, context: any) {
  if (! Array.isArray(x) || x.length !== len)
    _atd_bad_json('tuple of length ' + len, x, context);
}

function _atd_read_unit(x: any, context: any): null {
  if (x === null)
    return null
  else {
    _atd_bad_json('null', x, context)
    throw new Error('impossible')
  }
}

function _atd_read_bool(x: any, context: any): boolean {
  if (typeof x === 'boolean')
    return x
  else {
    _atd_bad_json('boolean', x, context)
    throw new Error('impossible')
  }
}

function _atd_read_int(x: any, context: any): number /*int*/ {
  if (Number.isInteger(x))
    return x
  else {
    _atd_bad_json('integer', x, context)
    throw new Error('impossible')
  }
}

function _atd_read_float(x: any, context: any): number {
  if (isFinite(x))
    return x
  else {
    _atd_bad_json('number', x, context)
    throw new Error('impossible')
  }
}

function _atd_read_string(x: any, context: any): string {
  if (typeof x === 'string')
    return x
  else {
    _atd_bad_json('string', x, context)
    throw new Error('impossible')
  }
}

function _atd_read_required_field<T>(type_name: string,
                                     field_name: string,
                                     read_elt: (x: any, context: any) => T,
                                     x: any,
                                     context: any): T {
  if (x === undefined) {
    _atd_missing_json_field(type_name, field_name)
    throw new Error('impossible')
  }
  else
    return read_elt(x, context)
}

function _atd_read_optional_field<T>(read_elt: (x: any, context: any) => T,
                                     x: any,
                                     context: any): T {
  if (x === undefined || x === null)
    return x
  else
    return read_elt(x, context)
}

function _atd_read_field_with_default<T>(read_elt: (x: any, context: any) => T,
                                         default_: T,
                                         x: any,
                                         context: any): T {
  if (x === undefined || x === null)
    return default_
  else
    return read_elt(x, context)
}

function _atd_read_option<T>(read_elt: (x: any, context: any) => T):
  (x: any, context: any) => Option<T> {
  function read_option(x: any, context: any): Option<T> {
    if (x === 'None')
      return null
    else {
      _atd_check_json_tuple(2, x, context);
      switch (x[0]) {
        case 'Some':
          return { value: read_elt(x[1], context) }
        default:
          _atd_bad_json('option', x, context)
          throw new Error('impossible')
      }
    }
  }
  return read_option
}

function _atd_read_nullable<T>(read_elt: (x: any, context: any) => T):
  (x: any, context: any) => T | null {
  function read_nullable(x: any, context: any): T | null {
    if (x === null)
      return null
    else
      return read_elt(x, context)
  }
  return read_nullable
}

function _atd_read_array<T>(read_elt: (x: any, context: any) => T):
  (elts: any, context: any) => T[] {
  function read_array(elts: any, context: any): T[] {
    if (Array.isArray(elts))
      return elts.map((x) => read_elt(x, elts))
    else {
      _atd_bad_json('array', elts, context)
      throw new Error('impossible')
    }
  }
  return read_array
}

function _atd_read_assoc_array_into_map<K, V>(
    read_key: (key: any, context: any) => K,
    read_value: (value: any, context: any) => V
  ): (x: any, context: any) => Map<K, V> {
  function read_assoc(elts: any, context: any): Map<K, V> {
    if (Array.isArray(elts)) {
      const res = new Map<K, V>([])
      for (const x of elts) {
        if (Array.isArray(x) && x.length === 2)
          res.set(read_key(x[0], x), read_value(x[1], x))
        else {
          _atd_bad_json('pair', x, elts)
          throw new Error('impossible')
        }
      }
      return res
    }
    else {
      _atd_bad_json('array', elts, context)
      throw new Error('impossible')
    }
  }
  return read_assoc
}

function _atd_read_assoc_object_into_map<T>(
    read_value: (value: any, context: any) => T
  ): (x: any, context: any) => Map<string, T> {
  function read_assoc(elts: any, context: any): Map<string, T> {
    if (typeof elts === 'object') {
      const res = new Map<string, T>([])
      for (const [key, value] of Object.entries(elts))
        res.set(key, read_value(value, elts))
      return res
    }
    else {
      _atd_bad_json('object', elts, context)
      throw new Error('impossible')
    }
  }
  return read_assoc
}

function _atd_read_assoc_object_into_array<T>(
    read_value: (value: any, context: any) => T
  ): (x: any, context: any) => [string, T][] {
  function read_assoc(elts: any, context: any): [string, T][] {
    if (typeof elts === 'object') {
      const res: [string, T][] = []
      for (const [key, value] of Object.entries(elts))
        res.push([key, read_value(value, elts)])
      return res
    }
    else {
      _atd_bad_json('object', elts, context)
      throw new Error('impossible')
    }
  }
  return read_assoc
}

function _atd_write_unit(x: any, context: any) {
  if (x === null)
    return x
  else {
    _atd_bad_ts('null', x, context)
    throw new Error('impossible')
  }
}

function _atd_write_bool(x: any, context: any): boolean {
  if (typeof x === 'boolean')
    return x
  else {
    _atd_bad_ts('boolean', x, context)
    throw new Error('impossible')
  }
}

function _atd_write_int(x: any, context: any): number /*int*/ {
  if (Number.isInteger(x))
    return x
  else {
    _atd_bad_ts('integer', x, context)
    throw new Error('impossible')
  }
}

function _atd_write_float(x: any, context: any): number {
  if (isFinite(x))
    return x
  else {
    _atd_bad_ts('number', x, context)
    throw new Error('impossible')
  }
}

function _atd_write_string(x: any, context: any): string {
  if (typeof x === 'string')
    return x
  else {
    _atd_bad_ts('string', x, context)
    throw new Error('impossible')
  }
}

function _atd_write_option<T>(write_elt: (x: T, context: any) => any):
   (elts: Option<T>, context: any) => any {
  function write_option(x: Option<T>, context: any): any {
    if (x === null)
      return 'None'
    else
      return ['Some', write_elt(x.value, context)]
  }
  return write_option
}

function _atd_write_nullable<T>(write_elt: (x: T, context: any) => any):
  (x: T | null, context: any) => any {
  function write_option(x: T | null, context: any): any {
    if (x === null)
      return null
    else
      return write_elt(x, context)
  }
  return write_option
}

function _atd_write_array<T>(write_elt: (elt: T, context: any) => any):
  (elts: T[], context: any) => any {
  return ((elts: T[], context: any): any =>
    elts.map((x) => write_elt(x, elts))
  )
}

function _atd_write_assoc_map_to_array<K, V>(
    write_key: (key: K, context: any) => any,
    write_value: (value: V, context: any) => any
  ): (elts: Map<K, V>, context: any) => any {
  function write_assoc(elts: Map<K, V>, context: any): any {
    const res: any = []
    elts.forEach((value: V, key: K) =>
      res.push([write_key(key, elts), write_value(value, elts)])
    )
    return res
  }
  return write_assoc
}

function _atd_write_assoc_map_to_object<T>(
    write_value: (value: T, context: any) => any
  ): (elts: Map<string, T>, context: any) => any {
  function write_assoc(elts: Map<string, T>, context: any): any {
    const res: any = {}
    elts.forEach((value: T, key: string) =>
      res[key] = write_value(value, elts)
    )
    return res
  }
  return write_assoc
}

function _atd_write_assoc_array_to_object<T>(
    write_value: (value: T, context: any) => any
  ): (elts: [string, T][], context: any) => any {
  function write_assoc(elts: [string, T][], context: any): any {
    const res: any = {}
    for (const [key, value] of elts)
      res[key] = write_value(value, elts)
    return res
  }
  return write_assoc
}

function _atd_write_required_field<T>(type_name: string,
                                      field_name: string,
                                      write_elt: (x: T, context: any) => any,
                                      x: T,
                                      context: any): any {
  if (x === undefined) {
    _atd_missing_ts_field(type_name, field_name)
    throw new Error('impossible')
  }
  else
    return write_elt(x, context)
}

function _atd_write_optional_field<T>(write_elt: (x: T, context: any) => any,
                                      x: T | undefined,
                                      context: any): any {
  if (x === undefined || x === null)
    return x
  else
    return write_elt(x, context)
}

function _atd_write_field_with_default<T>(
  write_elt: (x: T, context: any) => any,
  default_: T,
  x: T,
  context: any
): T {
  const value = (x === undefined || x === null) ? default_ : x
  return write_elt(value, context)
}

///// appended to specification.ts

import { normalize_target,normalize_specification,restore_target, restore_specification, normalize_service, restore_service, normalize_motivation, restore_motivation } from "./adapter";

export function writeSpecificationT(x: any, context: any = x): SpecificationT {
    return restore_specification(x, context, _writeSpecificationT);
}

export function readSpecificationT(x: any, context: any = x): SpecificationT {
    return normalize_specification(x, context, _readSpecificationT);
}


export function writeW3cAnnotationTargetT(x: any, context: any = x): W3cAnnotationTargetT {
    return restore_target(x, context, _writeW3cAnnotationTargetT);
}

export function readW3cAnnotationTargetT(x: any, context: any = x): W3cAnnotationTargetT {
    return normalize_target(x, context, _readW3cAnnotationTargetT);
}

export function writeServiceT(x: any, context: any = x): ServiceT {
    return restore_service(x, context, _writeServiceT);
}

export function readServiceT(x: any, context: any = x): ServiceT {
    return normalize_service(x, context, _readServiceT);
}

export function writeMotivationT(x: any, context: any = x): MotivationT {
    return restore_motivation(x, context, _writeMotivationT);
}

export function readMotivationT(x: any, context: any = x): MotivationT {
    return normalize_motivation(x, context, _readMotivationT);
}
